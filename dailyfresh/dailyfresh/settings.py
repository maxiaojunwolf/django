"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

# 设置‘根’路径为项目名dailyfresh


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'm-lwp8#0_40s_h*r%0py0+!9=2-b=)c@_yi@p-&=0*=#u-xuys'
# SECRET_KEY = '#4+53k1rj1ea!9qk$!2&sseq0mbcl(r2v@15yrx@rzsf1nh3xo'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []



# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    # django 自带的用户认证系统
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 添加富文本编辑应用，把插件的应用写在上边
    'tinymce',
    'haystack',# 搜索引擎的框架负责完成和django和whoosh的交互
    'users',
    'goods',
    'orders',
    'cart',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
sys.path.insert(1,os.path.join(BASE_DIR,'apps'))
WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh',
        'HOST':'192.168.8.133',
        # 'HOST':'localhost',
        'PORT':'3306',
        'USER':'root',
        'PASSWORD':'123456',
        # 'PASSWORD':'mysql',
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
# 静态文件加载路径
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]

# 引导迁移时执行我们自定义的user而不是django内部的user
AUTH_USER_MODEL = 'users.User'
# 配置邮件参数
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # 导入邮件模块
EMAIL_HOST = 'smtp.163.com' # 发邮件主机
EMAIL_PORT = 25 # 发邮件端口
EMAIL_HOST_USER = '15221149591@163.com' # 授权的邮箱
EMAIL_HOST_PASSWORD = 'm123456789' # 邮箱授权时获得的密码，非注册登录密码
EMAIL_FROM = '天天生鲜<15221149591@163.com>' # 发件人抬头

# 配置登陆状态session 的配置
# 缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.8.133:6379/5",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Session
# http://django-redis-chs.readthedocs.io/zh_CN/latest/#session-backend

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
# 配置验证登陆失败后的跳转页面
LOGIN_URL = '/users/login'

# 配置django自定义的存储环境
DEFAULT_FILE_STORAGE ='utils.fastdfs.storage.FastDFSStorage'

# 设置自定义就的存储类的配置文件
CLIENT_CONF = os.path.join(BASE_DIR,'utils/fastdfs/client.conf')
SERVER_IP = 'http://192.168.8.133:8888/'

# 添加tinymce配置
TINYMCE_DEFAULT_CONFIG = {
    'theme':'advanced',# 丰富的样式
    'width':600,
    'height':400,
}
#配置搜索引擎
HAYSTACK_CONNECTIONS = {
  'default': {
      # 使用whoosh引擎
      # 因为默认的是英文词库，在这里我们使用jieba中文词库所以去掉whoosh_cn_backend的cn
      'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
      # 索引文件路径
      'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
  }
}
# 当添加、修改、删除数据时，自动生成索引

HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'